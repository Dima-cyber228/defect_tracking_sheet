# app/telegram_notifier.py
import asyncio
from telegram import Bot
import io
import os
from typing import Dict, Optional, Any
import threading
import logging
from contextlib import asynccontextmanager

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞ `app`
from .core.config import TELEGRAM_BOT_TOKEN
from .database import get_user_by_name

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
bot_instance: Optional[Bot] = None

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---

async def send_photo_with_caption(bot, chat_id, photo_url_internal, caption):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if not photo_url_internal:
        logger.error(f"[Telegram Bot ERROR] photo_url_internal is None or empty for chat_id {chat_id}")
        return
    photo_path = None
    try:
        photo_filename = photo_url_internal.lstrip('/')
        photo_path = os.path.abspath(photo_filename)
        logger.debug(f"[Telegram Bot DEBUG] –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ: {photo_path}")
        if not os.path.exists(photo_path):
            logger.error(f"[Telegram Bot ERROR] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
            return
        with open(photo_path, 'rb') as photo_file:
            photo_bytes = photo_file.read()
            input_file = io.BytesIO(photo_bytes)
            input_file.name = os.path.basename(photo_path)
            await bot.send_photo(chat_id=chat_id, photo=input_file, caption=caption, parse_mode='HTML')
        logger.debug(f"[Telegram Bot DEBUG] –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except FileNotFoundError:
        error_path = photo_path if photo_path is not None else "unknown"
        logger.error(f"[Telegram Bot ERROR] –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è: {error_path}")
    except Exception as e:
        error_path = photo_path if photo_path is not None else "unknown"
        logger.error(f"[Telegram Bot ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} (path: {error_path}): {e}")

def send_telegram_notification_async(defect_data: Dict[Any, Any], responsible_person: Optional[str], executor_person: Optional[str]):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    """
    logger.debug(f"[Telegram Notifier] send_telegram_notification_async –≤—ã–∑–≤–∞–Ω–∞ —Å: defect_data={defect_data}, "
          f"responsible_person={responsible_person}, executor_person={executor_person}")

    if not TELEGRAM_BOT_TOKEN:
        logger.info("[Telegram Notifier] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    async def _send_notification():
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        global bot_instance
        if not bot_instance:
             logger.error("[Telegram Notifier] –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
             return

        try:
            defect_id = defect_data.get('id', 'N/A')
            equipment = defect_data.get('equipment', 'N/A')
            section = defect_data.get('section', 'N/A')
            description = defect_data.get('description', 'N/A')
            danger_level = defect_data.get('danger_level', 'N/A')
            photo_url_internal = defect_data.get('photo_url', None)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ—Ñ–µ–∫—Ç–µ</b>\n"
                f"<b>ID:</b> {defect_id}\n"
                f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {equipment}\n"
                f"<b>–£—á–∞—Å—Ç–æ–∫:</b> {section}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"<b>–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b> {danger_level}\n"
            )

            tasks = []
            notified_users = []

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            if responsible_person:
                user = get_user_by_name(responsible_person)
                if user:
                    user_id = user['telegram_id']
                    msg_text_resp = f"{message_text}<i>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º.</i>"
                    logger.debug(f"[Telegram Notifier] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {responsible_person} (ID: {user_id})")
                    if photo_url_internal:
                        task = send_photo_with_caption(bot_instance, user_id, photo_url_internal, msg_text_resp)
                        tasks.append(task)
                    else:
                        task = bot_instance.send_message(chat_id=user_id, text=msg_text_resp, parse_mode='HTML')
                        tasks.append(task)
                    notified_users.append(responsible_person)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if executor_person and executor_person != responsible_person:
                user = get_user_by_name(executor_person)
                if user:
                    user_id = user['telegram_id']
                    msg_text_exec = f"{message_text}<i>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.</i>"
                    logger.debug(f"[Telegram Notifier] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {executor_person} (ID: {user_id})")
                    if photo_url_internal:
                        task = send_photo_with_caption(bot_instance, user_id, photo_url_internal, msg_text_exec)
                        tasks.append(task)
                    else:
                        task = bot_instance.send_message(chat_id=user_id, text=msg_text_exec, parse_mode='HTML')
                        tasks.append(task)
                    notified_users.append(executor_person)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            if tasks:
                logger.debug(f"[Telegram Notifier] –û—Ç–ø—Ä–∞–≤–∫–∞ {len(tasks)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ä—É—Ç–∏–Ω—ã
                task_objects = [asyncio.create_task(t) for t in tasks]
                results = await asyncio.gather(*task_objects, return_exceptions=True)
                logger.info(f"[Telegram Notifier] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–∞ ID {defect_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {notified_users}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
                for i, result in enumerate(results):
                    if isinstance(result, Exception):
                        logger.error(f"[Telegram Notifier ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notified_users[i]}: {result}")
            else:
                logger.debug("[Telegram Notifier] –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

        except Exception as e:
            logger.error(f"[Telegram Notifier] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _send_notification –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–∞ ID {defect_data.get('id', 'N/A')}: {e}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º event loop
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_send_notification())
        logger.debug("[Telegram Notifier] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    except RuntimeError:
        # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º loop
        logger.warning("[Telegram Notifier] RuntimeError: no running event loop. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –Ω–æ–≤–æ–º loop...")
        try:
            new_loop = asyncio.new_event_loop()
            def run_loop():
                asyncio.set_event_loop(new_loop)
                new_loop.run_until_complete(_send_notification())
                new_loop.close()
            thread = threading.Thread(target=run_loop, daemon=True)
            thread.start()
            logger.debug("[Telegram Notifier] –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.")
        except Exception as e2:
            logger.error(f"[Telegram Notifier] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–∂–µ –≤ –Ω–æ–≤–æ–º loop/thread: {e2}")

# --- –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---

@asynccontextmanager
async def lifespan(app):
    """Lifespan handler –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    logger.info("[App Lifespan] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    global bot_instance
    if TELEGRAM_BOT_TOKEN:
        bot_instance = Bot(token=TELEGRAM_BOT_TOKEN)
        logger.info("[App Lifespan] Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    else:
        logger.info("[App Lifespan] –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.")
    yield
    logger.info("[App Lifespan] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ