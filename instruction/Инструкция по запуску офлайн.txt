
1.  Откройте терминал (командную строку или PowerShell

2.  Перейдите в корневую папку проекта `defect_tracking_sheet
    Используйте команду `cd` и укажите путь к папке. Если путь содержит пробелы, как в вашем случае, обязательно заключите его в двойные кавычки:
    ```bash
    cd "D:\Project Python\defect_tracking_sheet"
    ```
    *   Убедитесь, что вы перешли в правильную папку, выполнив команду `dir` (в Windows). Вы должны увидеть папки `app`, `frontend`, файл `requirements.txt` и, возможно, папку `uploads` и файл `.env`.

3.  Рекомендуется) Активируйте виртуальное окружение
    Это изолирует зависимости проекта от других Python-проектов на вашем компьютере.
    *   Если вы уже создали виртуальное окружение (папка `venv` существует в `D:\Project Python\defect_tracking_sheet`):
        ```bash
        # На Windows (в cmd):
        venv\Scripts\activate
        ```
        После успешной активации в начале строки командной строки появится префикс `(venv)`, например:
        ```bash
        (venv) D:\Project Python\defect_tracking_sheet>
        ```
    *   Если вы **еще не создали** виртуальное окружение:
        ```bash
        # Создание виртуального окружения (например, с именем venv)
        python -m venv venv

        # Активация виртуального окружения (как показано выше)
        venv\Scripts\activate
        ```

4.  Убедитесь, что все необходимые зависимости установлены
    Даже если вы устанавливали их ранее, лучше проверить, особенно если виртуальное окружение было создано заново или вы используете чистую консоль.
    ```bash
    pip install -r requirements.txt
    pip install python-dotenv
    ```
    *   `requirements.txt` содержит основные зависимости (`fastapi`, `uvicorn`, `python-telegram-bot`).
    *   `python-dotenv` необходим для работы с файлом `.env`.

5.  Опционально) Проверьте файл `.env`.
    *   В корне проекта (`D:\Project Python\defect_tracking_sheet`) должен находиться файл с именем `.env`.
    *   Откройте его в текстовом редакторе и убедитесь, что параметры настроены правильно:
        *   `TELEGRAM_BOT_TOKEN=`: Если вы хотите использовать уведомления Telegram, вставьте сюда токен вашего бота. Если нет, оставьте поле пустым.
        *   `ADMIN_PASSWORD=admin123`: Пароль для входа в административную панель. При необходимости измените его.
        *   `DATABASE_PATH=defects.db`: Путь к файлу базы данных SQLite.

6.  Запустите сервер Uvicorn
    Сервер нужно запускать из **корневой папки проекта** (`D:\Project Python\defect_tracking_sheet`), указав путь к приложению FastAPI внутри папки `app`.
    Убедитесь, что виртуальное окружение активировано (вы видите `(venv)`), затем выполните:
    ```bash
    uvicorn app.main:app --reload
    ```
    *   `app.main:app` означает "запустить объект `app`, определенный в файле `main.py`, который находится в папке `app`".
    *   Флаг `--reload` удобен для разработки, так как сервер автоматически перезапустится при изменении кода. Для production его можно опустить.

7.  Проверьте запуск.
    *   В терминале появятся сообщения вроде:
        ```
        INFO:     Will watch for changes in these directories: ['D:\\Project Python\\defect_tracking_sheet']
        INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
        INFO:     Started reloader process [...] using StatReload
        INFO:     Started server process [...]
        INFO:     Waiting for application startup.
        INFO:     Application startup complete.
        ```
    *   Откройте веб-браузер и перейдите по адресу `http://127.0.0.1:8000` или `http://localhost:8000`. Вы должны увидеть главную страницу "Системы учёта дефектов".

Чтобы остановить сервер вернитесь в окно терминала и нажмите `Ctrl+C`. Если сервер не останавливается сразу, нажмите `Ctrl+C` еще раз.

Краткий старт (если всё уже настроено

Если вы уже всё настраивали ранее, краткий путь выглядит так:

1.  `cd "D:\Project Python\defect_tracking_sheet"`
2.  `venv\Scripts\activate`
3.  `uvicorn app.main:app --reload`